import unittestimport pyrrrateFBA.util.runge_kutta as runge_kuttafrom pyrrrateFBA.pyrrrateModel import Modelfrom pathlib import PathMODEL_PATH = Path(__file__).parent / 'examples'all_model_dict = {'cc_diaux_deFBA':                  {'sbml_file_name': str(MODEL_PATH / 'rdeFBA' / 'carbon_core_diauxie.xml'),                   'is_rdeFBA': False, 'run_rdeFBA': False,                   'tspan': [0, 190], 'n_steps': 101, 'varphi': 0.001,                   'plot_only_y': [0,1,4]}, # --------------------------------                  'cc_diaux_rdeFBA':                  {'sbml_file_name': str(MODEL_PATH / 'rdeFBA' / 'carbon_core_diauxie.xml'),                   'is_rdeFBA': True, 'run_rdeFBA': True,                   'tspan': [0, 100], 'n_steps': 101, 'varphi': 0.001,                   'plot_only_y': [0,1,4]}, # --------------------------------                  'ecc2':                  {'sbml_file_name': str(MODEL_PATH / 'deFBA' / 'EColiCore2_deFBA_v3.0.xml'),                   'is_rdeFBA': False, 'run_rdeFBA': False,                   'tspan': [0,0.0001], 'n_steps': 1, 'varphi': 10**-5,                   'plot_only_y': [1,2,3]}, # --------------------------------                  'mini':                    {'sbml_file_name': str(MODEL_PATH / 'deFBA' / 'mini_minimal_network.xml'),                   'is_rdeFBA': False, 'run_rdeFBA': False,                   'tspan': [0, 10], 'n_steps': 501, 'varphi': 0,                   'plot_only_y': [0]}, # --------------------------------                  'yeast':                  {'sbml_file_name': str(MODEL_PATH / 'deFBA' / 'yeast.xml'),                   'is_rdeFBA': False, 'run_rdeFBA': False,                   'tspan': [0, 10**-6], 'n_steps': 2, 'varphi': 10**-5,                   'plot_only_y': [1,2,3]}, # --------------------------------                  'mmg':                  {'sbml_file_name': str(MODEL_PATH / 'deFBA' / 'minimal_metabolic_genetic_network.xml'),                   'is_rdeFBA': False, 'run_rdeFBA': False,                   'tspan': [0, 80], 'n_steps': 205, 'varphi': 10**-3,                   'plot_only_y': [0,1]}, # ----------------------------------                  'sr_deFBA':                  {'sbml_file_name': str(MODEL_PATH / 'rdeFBA' / 'self_replicator.xml'),                   'is_rdeFBA': False, 'run_rdeFBA': False,                   'tspan': [0, 55], 'n_steps': 205, 'varphi': 10**-3,                   'plot_only_y': [3,4,5,6]}, # ------------------------------                  'sr_rdeFBA':                  {'sbml_file_name': str(MODEL_PATH / 'rdeFBA' / 'self_replicator.xml'),                   'is_rdeFBA': True, 'run_rdeFBA': True,                   'tspan': [0, 42], 'n_steps': 101, 'varphi': 10**-3, # tspan should be 55!!!                   'plot_only_y': [0,1]}, # ------------------------------                  'eg_hen':                  {'sbml_file_name': str(MODEL_PATH / 'deFBA' / 'enzymatic_growth_Lindhorst.xml'),                   'is_rdeFBA': False, 'run_rdeFBA': False,                   'tspan': [0, 10], 'n_steps': 155, 'varphi': 10**-3,                   'plot_only_y': []}, # -------------------------------------                  'eg_2017':                  {'sbml_file_name': str(MODEL_PATH / 'deFBA' / 'enzymatic_growth_2017.xml'),                   'is_rdeFBA': False, 'run_rdeFBA': False,                   'tspan': [0, 10], 'n_steps': 155, 'varphi': 10**-3,                   'plot_only_y': []},                      }ALSO_PLOT = FalsePRINT_STUFF = True    def run_model_from_dict(model_name, **kwargs):    if PRINT_STUFF:        print(model_name)    model_name_dict = all_model_dict[model_name]    model = Model(model_name_dict['sbml_file_name'],                  is_rdefba=model_name_dict['run_rdeFBA'])    #    rkm_def = runge_kutta.RungeKuttaPars(s=2, family='RadauIIA')    #rkm_def = runge_kutta.RungeKuttaPars(s=1, family='Explicit1')    #rkm_def = runge_kutta.RungeKuttaPars(s=2, family='LobattoIIIA')    #rkm_def = None    rkm = kwargs.get('rkm', rkm_def)    #    if PRINT_STUFF:        print(rkm.family)    actually_run_rdeFBA = model_name_dict['run_rdeFBA']    n_steps = kwargs.get('n_steps', model_name_dict['n_steps'])    #        #    #model.print_numbers()    #    can_run = False    try:        sol = model.rdeFBA(model_name_dict['tspan'],                           model_name_dict['varphi'],                           run_rdeFBA=actually_run_rdeFBA,                           do_soa=False,                           n_steps=n_steps,                           runge_kutta=rkm)        can_run = True    except:        pass    if ALSO_PLOT:        sol.plot_all(y_data_indices=model_name_dict['plot_only_y'])    return model, can_run        class TestPyrrrateModel(unittest.TestCase):    """    Go through the small test examples and just check whether they 'run'    """    def test_cc_diaux_deFBA(self):        """        Carbon Core model        """        _, can_run = run_model_from_dict('cc_diaux_deFBA')        self.assertTrue(can_run)    def test_cc_diaux_rdeFBA(self):        """        Carbon Core model regulated        """        _, can_run = run_model_from_dict('cc_diaux_rdeFBA')        self.assertTrue(can_run)    def test_mini(self):        """        strange way to compute an exponential        """        rkm = runge_kutta.RungeKuttaPars(s=4, family='Explicit1')        _, can_run = run_model_from_dict('mini', rkm=rkm)        self.assertTrue(can_run)    def test_mmg(self):        """        minimal metabolic genetic network        """        _, can_run = run_model_from_dict('mmg')        self.assertTrue(can_run)    def test_sr_deFBA(self):        """        self replicator model        """        _, can_run = run_model_from_dict('sr_deFBA')        self.assertTrue(can_run)    def test_sr_rdeFBA(self):        """        self replicator model (regulated)        """        _, can_run = run_model_from_dict('sr_rdeFBA')        self.assertTrue(can_run)    def test_eg_hen(self):        """        enzymatic growth model (old version)        """        _, can_run = run_model_from_dict('eg_hen')        self.assertTrue(can_run)    def test_eg_2017(self):        """        enzymatic growth model (updated version)        """        _, can_run = run_model_from_dict('eg_2017')        self.assertTrue(can_run)if __name__ == '__main__':    unittest.main()    